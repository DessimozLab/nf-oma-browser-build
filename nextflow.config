// Nextflow configuration
nextflow.enable.moduleBinaries = true // Enables the use of modules with binary scripts
nextflow.preview.output = true        // Enables publish/output section for workflows

outputDir = "./results"

// Global default params
params {
    // input output parameters
    hog_orthoxml = null
    matrix_file = null

    oma_source = "FastOMA"                // FastOMA or Production

    // Production OMA input parameter
    pairwise_orthologs_folder = null      // Folder where pairwise orthologs are stored in tsv format
    genomes_dir = null                    // OMA genomes directory

    // FastOMA input parameter
    fastoma_proteomes = null              // Proteomes of analysis  ; usually in_folder/proteome
    fastoma_species_tree = null           // species_tree           ; usually output/species_tree_checked.nwk
    fastoma_speciesdata = null            // species meta data [optional]

    // domains directory
    known_domains = null

    // cath/gene3d input data
    infer_domains = false
    hmm_db             = "ftp://orengoftp.biochem.ucl.ac.uk/gene3d/v21.0.0/gene3d_hmmsearch/hmms.tar.gz"
    discontinuous_regs = "http://download.cathdb.info/gene3d/v21.0.0/gene3d_hmmsearch/discontinuous/discontinuous_regs.pkl"
    cath_domain_list   = "http://download.cathdb.info/cath/releases/latest-release/cath-classification-data/cath-domain-list.txt"
    cath_names_path    = "http://download.cathdb.info/cath/releases/latest-release/cath-classification-data/cath-names.txt"
    pfam_names_path    = "https://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.clans.tsv.gz"

    // xref paths
    taxonomy_sqlite_path = null
    xref_uniprot_swissprot = "https://ftp.ebi.ac.uk/pub/databases/uniprot/knowledgebase/uniprot_sprot.dat.gz"
    xref_uniprot_trembl = "/dev/null"
    xref_refseq = null     //null -> download from refseq; folder -> files with gpff.gz to process

    // omamer levels
    omamer_levels = null

    // gene ontology
    go_obo = "http://purl.obolibrary.org/obo/go/go-basic.obo"
    go_gaf = "https://ftp.ebi.ac.uk/pub/databases/GO/goa/UNIPROT/goa_uniprot_all.gaf.gz"

    // Help message
    help            = false

    // configurations from nf-core
    custom_config_version   = "master"
    custom_config_base      = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
}

// Hardcoded environmental variables
env {
    PYTHONNOUSERSITE = 1
}

// Load base.config by default for all pipelines
includeConfig "config/base.config"
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    apptainer {
        singularity.enabled     = false
        singularity.autoMounts  = false
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = true
        apptainer.autoMounts    = true

    }
    test      { includeConfig 'config/test.config'      }
    test_full { includeConfig 'config/test_full.config' }

    sib_hpc {
        includeConfig "config/sib_hpc.config"
    }
    euler_hpc {
        includeConfig "config/euler_hpc.config"
    }
}

apptainer.registry    = 'quay.io'
docker.registry       = 'quay.io'
podman.registry       = 'quay.io'
singularity.registry  = 'quay.io'
charliecloud.registry = 'quay.io'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']



// Meta-data of the pipeline
manifest {
    author = "Adrian Altenhoff"
    defaultBranch = "main"
    description = "Convert OMA run into OMA Browser release"
    mainScript = "main.nf"
    name = "oma-browser-build"
    nextflowVersion = ">=24.10.0"
    version = "1.4dev"
}

// plugins
plugins {
    id "nf-schema@2.2.0"
}

// Set schema validation options
validation {
    help { enabled = true }
}

// Load modules.config for DSL2 module specific options
includeConfig "config/modules.config"

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
// Creates logs for what, when, where, and how the workflow was run
// TODO: add the check for if its a stub or not
trace {
    enabled = !params.help ? true : false
    file = "$outputDir/reports/nextflow/trace_${trace_timestamp}.txt"
    fields = "task_id,native_id,hash,name,status,submit,complete,script"
    overwrite = true
}
report {
    enabled = !params.help ? true : false
    file = "$outputDir/reports/nextflow/exec_report_${trace_timestamp}.html"
    overwrite = true
}
timeline {
    enabled = !params.help ? true : false
    file = "$outputDir/reports/nextflow/timeline_${trace_timestamp}.html"
    overwrite = true
}

