// Nextflow configuration
nextflow.enable.moduleBinaries = true // Enables the use of modules with binary scripts


// Global default params
params {
    // input output parameters
    hog_orthoxml = null
    matrix_file = null
    pairwise_orthologs_folder = null

    // OMA genomes directory
    genomes_dir = null

    // domains directory
    known_domains = null
    cath_names_path = "http://download.cathdb.info/cath/releases/latest-release/cath-classification-data/cath-names.txt"
    pfam_names_path = "ftp://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.clans.tsv.gz"

    // xref paths
    xref_uniprot_swissprot = "https://ftp.ebi.ac.uk/pub/databases/uniprot/knowledgebase/uniprot_sprot.dat.gz"
    xref_uniprot_trembl = "/dev/null"
    xref_refseq = null     //null -> download from refseq; folder -> files with gpff.gz to process


    // OMA Browser data directory
    oma_browser_data_dir = "test/bla"
    nr_medium_procs = 10

    // Output directory
    outdir = "./results"

    // Help message
    help            = false
}

// Hardcoded environmental variables
env {
    PYTHONNOUSERSITE = 1
    // REL                         = "rz_jan"
    // HOG_REL_CHAR = null
    // DARWIN_DATA_DIRECTORY = null
    // DARWIN_COMMAND_PATH = null
    // DARWIN_BROWSER_REPO_PATH = null
    // DARWIN_BROWSER_SHARE = null
    // DARWIN_BROWSERDATA_PATH = null
    // DARWIN_BROWSER_SCRATCH_PATH = null
}

// Load base.config by default for all pipelines
includeConfig "config/base.config"

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    apptainer {
        singularity.enabled     = false
        singularity.autoMounts  = false
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = true
        apptainer.autoMounts    = true

    }
    test      { includeConfig 'config/test.config'      }
    test_full { includeConfig 'config/test_full.config' }

    sib_hpc {
        includeConfig "config/sib_hpc.config"
    }
    euler_hpc {
        includeConfig "config/euler_hpc.config"
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']



// Meta-data of the pipeline
manifest {
    author = "Adrian Altenhoff"
    defaultBranch = "main"
    description = "Convert OMA run into OMA Browser release"
    mainScript = "main.nf"
    name = "oma-browser-build"
    nextflowVersion = ">=24.04.0"
    version = "0.0.0"
}

// plugins
plugins {
    id "nf-schema@2.0.0"
    id "nf-prov@1.2.2"
}

// Set schema validation options
validation {
    validate_params         = true
    lenientMode             = false
    failUnrecognisedParams  = false //Once all params are put into the schema you can put this back to true
    monochromeLogs          = false
    monochrome_logs         = false
    skip_duplicate_check    = false
    showHiddenParams        = false
    defaultIgnoreParams     = ["validate_params", "lenientMode", "failUnrecognisedParams", "monochromeLogs", "monochrome_logs", "skip_duplicate_check", "showHiddenParams" ,"defaultIgnoreParams"]
    // ignoreParams            = ""

}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
// Creates logs for what, when, where, and how the workflow was run
// TODO: add the check for if its a stub or not
trace {
    enabled = (params.outdir && !params.help) ? true : false
    file = "${params.outdir}/reports/nextflow/trace_${trace_timestamp}.txt"
    fields = "task_id,native_id,hash,name,status,submit,complete,script"
    overwrite = true
}
report {
    enabled = (params.outdir && !params.help) ? true : false
    file = "${params.outdir}/reports/nextflow/exec_report_${trace_timestamp}.html"
    overwrite = true
}
timeline {
    enabled = (params.outdir && !params.help) ? true : false
    file = "${params.outdir}/reports/nextflow/timeline_${trace_timestamp}.html"
    overwrite = true
}
prov {
    enabled = (params.outdir && !params.help) ? true : false
    formats {
        bco {
            file = "${params.outdir}/reports/nextflow/manifest_${trace_timestamp}.json"
            overwrite = true
        }
    }
}

