{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/dessimozlab/oma-browser-build/master/nextflow_schema.json",
  "title": "oma-browser-build pipeline parameters",
  "description": "Convert OMA run into OMA Browser release",
  "type": "object",
  "$defs": {
    "datatype_setting": {
      "title": "Datatype setting",
      "type": "object",
      "description": "",
      "default": "",
      "properties": {
        "oma_source": {
          "type": "string",
          "default": "FastOMA",
          "enum": ["FastOMA", "Production"],
          "description": "Selection of OMA data source. Can be either 'FastOMA' or 'Production'. The selection requires setting either the parameters for FastOMA or Production."
        },
        "oma_version": {
          "type": "string",
          "description": "Version of the OMA Browser instance. It defaults to 'All.<Mon><YEAR>'"
        },
        "oma_release_char": {
          "type": "string",
          "description": "Release specific character (used in HOG ids)",
          "pattern": "^[A-Z]?$",
          "help_text": "A single capital letter [A-Z] which makes the HOG-IDs unique accross different releases."
        }
      }
    },
    "fastoma_input_data": {
      "title": "FastOMA Input data",
      "type": "object",
      "description": "Input files generated with FastOMA",
      "default": "",
      "properties": {
        "fastoma_species_tree": {
          "type": "string",
          "description": "Species Tree in newick format. We recommend using the tree stored in the FastOMA output folder named 'species_tree_checked.nwk'.",
          "format": "file-path"
        },
        "fastoma_proteomes": {
          "type": "string",
          "format": "directory-path",
          "description": "Folder where the input fasta files for each proteomes are located."
        },
        "fastoma_speciesdata": {
          "type": "string",
          "format": "file-path",
          "pattern": "^\\S+\\.(txt|csv|tsv)",
          "mimetype": "text/csv",
          "description": "TSV file with additional information about the proteomes, must contain \"Name\" column if provided.",
          "help_text": "Optional (but recommended) TSV file with additional information about the proteomes. If specified, the file must contain at least the column \"Name\". It's values must match the filenames of the proteomes (without file extension). We suggest to include the following columns in addition: - NCBITaxonId (needed to map cross-references reliably)"
        }
      }
    },
    "production_oma_input_data": {
      "title": "Production OMA Input data",
      "type": "object",
      "description": "Input files genereated from an OMA Production run",
      "default": "",
      "properties": {
        "pairwise_orthologs_folder": {
          "type": "string",
          "description": "Pairwise Orthologs (only by Standard OMA pipeline)",
          "format": "directory-path"
        },
        "matrix_file": {
          "type": "string",
          "description": "OMA Groups file",
          "format": "file-path"
        },
        "hog_orthoxml": {
          "type": "string",
          "description": "Hierarchcial orthologous groups (HOGs) in orthoxml format",
          "format": "file-path",
          "mimetype": "application/xml"
        },
        "genomes_dir": {
          "type": "string",
          "description": "Folder containing genomes",
          "format": "directory-path"
        },
        "homoeologs_folder": {
          "type": "string",
          "description": "Folder containing the homoeologs files",
          "format": "directory-path"
        }
      },
      "required": ["hog_orthoxml", "genomes_dir"]
    },
    "domain_data": {
      "title": "Domain data",
      "type": "object",
      "description": "File paths for domain annotations",
      "default": "",
      "properties": {
        "infer_domains": {
          "type": "boolean",
          "description": "Flag indicating whether domains are inferred using the CATH/Gene3d pipeline.",
          "help_text": "If set to true, the pipeline will run the CATH/Gene3D pipeline to infer domain assignments. This will require substantial amount of compute time. The set of already known domains (see parameter 'known_domains') will be used to skip the inference of domains that are already known. If set to false, the pipeline will use the known domain assignments provided in the 'known_domains' parameter.",
          "fa_icon": "fas fa-toggle-on"
        },
        "known_domains": {
          "type": "string",
          "description": "Folder containing known domain assignments files.",
          "format": "directory-path",
          "help_text": "The folder must contain csv/tsv files that contain three columns (md5hash of sequence, CATH-domain-id, region on sequence). The output of a previous run of this pipeline can thus be used as input."
        },
        "cath_names_path": {
          "type": "string",
          "default": "http://download.cathdb.info/cath/releases/latest-release/cath-classification-data/cath-names.txt",
          "description": "File containing CATH domain descriptions"
        },
        "hmm_db": {
          "type": "string",
          "default": "ftp://orengoftp.biochem.ucl.ac.uk/gene3d/v21.0.0/gene3d_hmmsearch/hmms.tar.gz",
          "description": "Path where the domain hmms for the cath/gene3d pipeline are located."
        },
        "cath_domain_list": {
          "type": "string",
          "default": "http://download.cathdb.info/cath/releases/latest-release/cath-classification-data/cath-domain-list.txt",
          "description": "File with mapping from hmm id to cath domain id."
        },
        "discontinuous_regs": {
          "type": "string",
          "default": "http://download.cathdb.info/gene3d/v21.0.0/gene3d_hmmsearch/discontinuous/discontinuous_regs.pkl",
          "description": "File provided by gene3d to handle discontinuous regions"
        },
        "pfam_names_path": {
          "type": "string",
          "default": "https://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.clans.tsv.gz",
          "description": "File containing Pfam descriptions"
        }
      }
    },
    "crossreferences": {
      "title": "Crossreferences",
      "type": "object",
      "description": "Integrate crossreferences",
      "default": "",
      "properties": {
        "xref_uniprot_swissprot": {
          "type": "string",
          "default": "https://ftp.ebi.ac.uk/pub/databases/uniprot/knowledgebase/uniprot_sprot.dat.gz",
          "description": "UniProtKB/SwissProt annotation in text format"
        },
        "xref_uniprot_trembl": {
          "type": "string",
          "default": "/dev/null",
          "description": "UniProtKB/TrEMBL annotations in text format"
        },
        "taxonomy_sqlite_path": {
          "type": "string"
        },
        "xref_refseq": {
          "type": "string",
          "description": "Folder containing RefSeq gbff files."
        }
      }
    },
    "gene_ontology": {
      "title": "Gene Ontology",
      "type": "object",
      "description": "Gene Ontology files to integrate",
      "default": "",
      "properties": {
        "go_obo": {
          "type": "string",
          "default": "http://purl.obolibrary.org/obo/go/go-basic.obo",
          "description": "Gene Ontology OBO file"
        },
        "go_gaf": {
          "type": "string",
          "default": "https://ftp.ebi.ac.uk/pub/databases/GO/goa/UNIPROT/goa_uniprot_all.gaf.gz",
          "description": "Gene Ontology annotations (GAF format). This can the GOA database or a glob pattern with local files in gaf format."
        }
      }
    },
    "omamer": {
      "title": "OMAmer",
      "type": "object",
      "description": "Parameters regarding building OMAmer databases based on the generated OMA instance",
      "default": "",
      "properties": {
        "omamer_levels": {
          "type": "string",
          "description": "Comma-seperated list of taxonomic levels for which OMAmer databases should be built.",
          "help_text": "The input string is parsed as a comma-seperated list, e.g. given 'Mammalia,Primates' as parameter value would build two OMAmer databases, one for Mammalia and one for Primates. Note that the taxonomic levels must exist in the input species tree."
        }
      }
    },
    "exporting_as_rdf": {
      "title": "Exporting as RDF",
      "type": "object",
      "description": "Parameters regarding the export as rdf triples",
      "properties": {
        "rdf_export": {
          "type": "boolean",
          "description": "Flag to activate export as RDF triples",
          "fa_icon": "fas fa-toggle-on",
          "help_text": "Activating rdf_export will enable the dump of RDF ttl files which can be imported into a Sparql endpoint."
        },
        "rdf_orthOntology": {
          "type": "string",
          "description": "user provided orthOntology file. If not provided, default ontology will be used"
        },
        "rdf_prefixes": {
          "type": "string",
          "description": "user provided rdf prefix mapping. if not provided, default prefixes will be used."
        }
      }
    },
    "generic_options": {
      "title": "Generic options",
      "type": "object",
      "fa_icon": "fas fa-file-import",
      "description": "Less common options for the pipeline, typically set in a config file.",
      "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
      "properties": {
        "help": {
          "type": "boolean",
          "description": "Display help text.",
          "fa_icon": "fas fa-question-circle",
          "hidden": true
        },
        "custom_config_version": {
          "type": "string",
          "description": "version of configuration base to include (nf-core configs)",
          "default": "master",
          "hidden": true
        },
        "custom_config_base": {
          "type": "string",
          "default": "https://raw.githubusercontent.com/nf-core/configs/master",
          "description": "location where to look for nf-core/configs",
          "hidden": true
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/$defs/datatype_setting"
    },
    {
      "$ref": "#/$defs/fastoma_input_data"
    },
    {
      "$ref": "#/$defs/production_oma_input_data"
    },
    {
      "$ref": "#/$defs/domain_data"
    },
    {
      "$ref": "#/$defs/crossreferences"
    },
    {
      "$ref": "#/$defs/gene_ontology"
    },
    {
      "$ref": "#/$defs/omamer"
    },
    {
      "$ref": "#/$defs/exporting_as_rdf"
    },
    {
      "$ref": "#/$defs/generic_options"
    }
  ]
}
