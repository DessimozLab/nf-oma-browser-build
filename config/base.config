
//Process scope
process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { 1    * task.attempt }
    memory = { 6.GB * task.attempt }
    time   = { 4.h  * task.attempt }
    resourceLimits = [cpus: 6, memory: 16.GB, time: 72.h ]
    
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? "retry" : "finish" }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { 1                   }
        memory = { 6.GB * task.attempt }
        time   = { 4.h  * task.attempt }
    }
    withLabel:process_low {
        cpus   = { 2     * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }
    withLabel:process_medium {
        cpus   = { 6     * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }
    withLabel:process_high {
        cpus   = { 12    * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = { 16.h  * task.attempt }
    }
    withLabel:process_long {
        time   = { 20.h  * task.attempt }
    }
    withLabel:process_low_memory {
        memory = { 12.GB * task.attempt }
    }
    withLabel:process_medium_memory{
        memory = { 36.GB * task.attempt }
    }
    withLabel:process_high_memory {
        memory = { 72.GB * task.attempt }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }


    // requirements for SeqIndex based on technical considerations
    withName: '.*:BUILD_SEQINDEX' {
        cpus   = { 1 }
        memory = { 800.MB + (meta.nr_of_amino_acids * 24.B) * ((task.attempt + 1) / 2) }
        // time ~ 30sec * TotAA[MB]*log(TotAA[MB])
        time   = { 1.min * (0.5 * meta.nr_of_amino_acids / Math.pow(2,20) * Math.log(meta.nr_of_amino_acids / Math.pow(2, 20)) + 10) * task.attempt }
    }

    withName: '.*:BUILD_HOG_H5'{
        cpus   = { 1 }
        memory = { 500.MB + 10.KB*Math.ceil(orthoxml.size() / 1024) * (2*task.attempt-1) }
        time   = { 1.min * (Math.ceil( meta.nr_of_genomes / 3 ) + 10) * task.attempt }
    }

    withName: ".*:ADD_PAIRWISE_ORTHOLOGS" {
        cpus   = { meta.nr_of_genomes < 10 ? 2 : (meta.nr_of_genomes < 30 ? 4 : (meta.nr_of_genomes < 300 ? 6 : 12))  }
        memory = { 3.GB + 100.KB * (Math.ceil(meta.max_nr_seqs_in_genome/1024) * meta.nr_of_genomes) * task.attempt }
        time   = { 1.min * (Math.ceil( meta.nr_of_genomes / 2 ) + 10) * task.attempt }
    }

    withName: "CONVERT_PROTEINS" {
        cpus   = { 1 }
        memory = { (400.MB + 12.B * dbpath.size()) * task.attempt }
        time   = { (5.min + 1.sec * (genome.TotEntries as Long)/100) * task.attempt }
    }

    withName: "INFER_FINGERPRINTS" {
        cpus   = { 1 }
        memory = { (800.MB + meta.nr_of_amino_acids * 2.B) * task.attempt }
        time   = { (10.min + Math.ceil(meta.nr_of_sequences / 100) * 1.sec) * (2 * task.attempt - 1)}
    }

    withName: "INFER_KEYWORDS" {
        cpus   = { 1 }
        memory = { (800.MB + meta.nr_of_sequences * 500.B) * task.attempt }
        time   = { (10.min + Math.ceil(meta.nr_of_sequences / 500) * 1.sec) * (2 * task.attempt - 1)}
    }

    withName: "HMMER_HMMSEARCH" {
        cpus   = { 4 }
        memory = { 1.GB * (2*task.attempt-1) }
        time   = { 2.h * (2*task.attempt-1)  }
    }

}